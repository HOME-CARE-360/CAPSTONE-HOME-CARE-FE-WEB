name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - run: npm ci
      - run: npm run lint
      - run: npx tsc --noEmit
      - run: npm run format:check
      - run: npm test --if-present

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NODE_ENV=production
            NEXT_PUBLIC_API_URL_BACKEND=${{ secrets.NEXT_PUBLIC_API_URL_BACKEND }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Add VPS to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy via SSH
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            set -e
            PROJECT_NAME=homecare-360-fe
            BRANCH=${{ github.ref == 'refs/heads/main' && 'main' || 'develop' }}
            ENV_FILE=.env.${BRANCH}
            PORT=${{ github.ref == 'refs/heads/main' && '3000' || '3001' }}

            WORKDIR=/home/${{ secrets.VPS_USER }}/projects/capstone/$PROJECT_NAME-${BRANCH}

            mkdir -p $WORKDIR && cd $WORKDIR

            if [ ! -d ".git" ]; then
              git clone -b $BRANCH https://github.com/${{ github.repository }}.git .
            else
              git reset --hard && git clean -fd && git pull origin $BRANCH
            fi

          cat <<EOT > $ENV_FILE
            NODE_ENV=${BRANCH}
            PORT=$PORT
            NEXT_PUBLIC_API_URL_BACKEND=${{ secrets.NEXT_PUBLIC_API_URL_BACKEND }}
            BUILD_TARGET=runner
          EOT

            docker compose --env-file $ENV_FILE down || true
            docker image prune -f
            docker compose --env-file $ENV_FILE up -d --build

            sleep 10

            if ! docker compose --env-file $ENV_FILE ps | grep -q "Up"; then
              docker compose --env-file $ENV_FILE logs
              echo "üö´ Deployment failed on $BRANCH"
              exit 1
            fi

            echo "‚úÖ $BRANCH deployment completed!"
          EOF

      - name: Health Check
        run: |
          sleep 30
          PORT=${{ github.ref == 'refs/heads/main' && '3000' || '3001' }}
          curl -f http://${{ secrets.VPS_HOST }}:$PORT/api/health || {
            echo "‚ùå Health check failed"
            exit 1
          }

  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ Deployment succeeded!"
          else
            echo "‚ùå Deployment failed!"
            exit 1
          }
