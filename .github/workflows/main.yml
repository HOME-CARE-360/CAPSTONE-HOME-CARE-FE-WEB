name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type check
        run: npx tsc --noEmit

      - name: Run format check
        run: npm run format:check

      - name: Run tests (if available)
        run: npm test --if-present

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NODE_ENV=production
            NEXT_PUBLIC_API_URL_BACKEND=${{ secrets.NEXT_PUBLIC_API_URL_BACKEND }}

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Add host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to staging
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            # Create projects directory if it doesn't exist
            mkdir -p /home/${{ secrets.VPS_USER }}/projects/capstone
            
            # Navigate to staging project directory
            cd /home/${{ secrets.VPS_USER }}/projects/capstone/homecare-360-fe-staging || mkdir -p /home/${{ secrets.VPS_USER }}/projects/capstone/homecare-360-fe-staging && cd /home/${{ secrets.VPS_USER }}/projects/capstone/homecare-360-fe-staging
            
            # Pull latest changes
            git pull origin develop || git clone -b develop https://github.com/${{ github.repository }}.git .
            
            # Create .env.development for staging
            cat > .env.development << 'ENVEOF'
            NODE_ENV=staging
            PORT=3001
            NEXT_PUBLIC_API_URL_BACKEND=${{ secrets.NEXT_PUBLIC_API_URL_BACKEND }}
            BUILD_TARGET=runner
            ENVEOF
            
            # Deploy with Docker Compose
            docker-compose --env-file .env.development down || true
            docker image prune -f
            docker-compose --env-file .env.development up -d --build
            
            # Wait for container to start
            sleep 30
            
            # Check if container is running
            if ! docker-compose --env-file .env.development ps | grep -q "Up"; then
              echo "Staging deployment failed"
              docker-compose --env-file .env.development logs
              exit 1
            fi
            
            echo "Staging deployment completed!"
          EOF

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Add host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to production
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            # Create projects directory if it doesn't exist
            mkdir -p /home/${{ secrets.VPS_USER }}/projects/capstone
            
            # Navigate to production project directory
            cd /home/${{ secrets.VPS_USER }}/projects/capstone/homecare-360-fe || mkdir -p /home/${{ secrets.VPS_USER }}/projects/capstone/homecare-360-fe && cd /home/${{ secrets.VPS_USER }}/projects/capstone/homecare-360-fe
            
            # Pull latest changes
            git pull origin main || git clone https://github.com/${{ github.repository }}.git .
            
            # Create .env.production for production
            cat > .env.production << 'ENVEOF'
            NODE_ENV=production
            PORT=3000
            NEXT_PUBLIC_API_URL_BACKEND=${{ secrets.NEXT_PUBLIC_API_URL_BACKEND }}
            BUILD_TARGET=runner
            ENVEOF
            
            # Deploy with Docker Compose
            docker-compose --env-file .env.production down || true
            docker image prune -f
            docker-compose --env-file .env.production up -d --build
            
            # Wait for container to start
            sleep 30
            
            # Check if container is running
            if ! docker-compose --env-file .env.production ps | grep -q "Up"; then
              echo "Production deployment failed"
              docker-compose --env-file .env.production logs
              exit 1
            fi
            
            echo "Production deployment completed!"
          EOF

      - name: Health check
        run: |
          sleep 60
          curl -f http://${{ secrets.VPS_HOST }}:3000/api/health || {
            echo "Health check failed"
            exit 1
          }

  notify:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always() && (needs.deploy-staging.result != 'skipped' || needs.deploy-production.result != 'skipped')

    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-staging.result }}" == "success" ] || [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi
